---
init_cmd: |
  # NOTE:
  #   This file does not contain simulation parameters or spawns virtual robots.
  #   Those tasks are performed by the Coordinator tmule file. Coordinator tmule
  #   file should be launched before this one. It provides:
  #   - global params. 
  #   - coordination nodes.
  #   - gazebo world. 
  #   
  #   - Coordinator ROSMASTER_URI wo
  #   If you are simulating/debugging in a single machine, try using param --session in tmule 

  source ./iliad-setup.sh
  export ROS_MASTER_URI="http://$ROS_MASTER:$ROS_MASTER_ROBOT_PORT" 
  if [[ $ROSDUCT == 'false' ]]; then export ROS_MASTER_URI=http://$ROSBRIDGE_IP:11311; fi
  
windows:
- name: roscore
  panes:
  - if [[ $ROSDUCT == 'true' ]]; then roscore -v --port=$ROS_MASTER_ROBOT_PORT ; fi 
  - echo "Go thru the door!"
 
- name: ros-setup
  panes:
  # rosparam load $SCENARIO_NAME_YAML_FILE doesn't substitute $(find blah_ros)/config/blah.yaml
  - sleep 5; roslaunch iliad_launch_system load_params.launch file:="$SCENARIO_NAME_YAML_FILE"; roslaunch iliad_launch_system load_params.launch file:="$ROBOT_NAME_YAML_FILE"
  - sleep 6; rosrun persistent_topics single_channel_persistent_topics_node _topics:="['/maps/map_laser2d','/maps/map_metadata']" _file_name:="$HOME/.ros/iliad.ptb"
  - sleep 7; if [[ $ROSDUCT == 'true' ]]; then roslaunch iliad_launch_system robot_websocket_adapter.launch robot_id:=$ROBOT_NO rosbridge_ip:=$ROSBRIDGE_IP rosbridge_port:=$ROSBRIDGE_PORT ; fi 
  # TODO to be used
  #   - sleep 3; mkdir -p "$MONGO_PATH" && roslaunch mongodb_store mongodb_store.launch db_path:=$MONGO_PATH

- name: robot
  panes:
  # robot_description, robot driver (speed), urdf description, robot tf tree
  # FIXME: orunav_mpc needs to be recompiled if you want to switch between real/simulated. What about a nice rosparam?
  -  sleep 7; roslaunch iliad_launch_system robot_bringup.launch robot_id:=$ROBOT_NO sim:=$SIM robot_type:=$ROBOT_TYPE  asus:=$PALLET_SENSOR velodyne:=$VELODYNE kinect2:=$KINECT2

- name: sensors
  panes:
# TODO: In cititruck this is done by kmo_navserver, which is also a navigation module. This will be revised 
#  - roslaunch iliad_launch_system lasers.launch        robot_id:=$ROBOT_NO sim:=$SIM robot_type:=$ROBOT_TYPE laser2d_floor:=$LASER2D_FLOOR laser2d_top:=$LASER2D_TOP
  - sleep 7; roslaunch iliad_launch_system velodyne.launch      robot_id:=$ROBOT_NO sim:=$SIM has_sensor:=$VELODYNE
  - sleep 7; roslaunch iliad_launch_system kinect2.launch       robot_id:=$ROBOT_NO sim:=$SIM has_sensor:=$KINECT2
  - sleep 7; roslaunch iliad_launch_system pallet_sensor.launch robot_id:=$ROBOT_NO sim:=$SIM has_sensor:=$PALLET_SENSOR sensor:=$PALLET_SENSOR_TYPE    

- name: nav_services1
  panes:
  - sleep 7; roslaunch iliad_launch_system  get_path_service_hierarchical.launch          robot_id:=$ROBOT_NO sim:=$SIM
  - sleep 7; roslaunch iliad_launch_system  polygonconstraint_service.launch robot_id:=$ROBOT_NO
  - sleep 7; roslaunch iliad_launch_system  smoothed_path_service.launch     robot_id:=$ROBOT_NO
  - sleep 7; roslaunch iliad_launch_system  smoothed_straight_service.launch robot_id:=$ROBOT_NO

- name: nav_services2
  panes:
  - sleep 7; roslaunch iliad_launch_system deltatvec_service.launch        robot_id:=$ROBOT_NO
  - sleep 7; roslaunch iliad_launch_system fork_control.launch             robot_id:=$ROBOT_NO robot_type:=$ROBOT_TYPE 

- name: robot_execution_drivers
  panes:
  - sleep 7; roslaunch iliad_launch_system vehicle_execution_node.launch   robot_id:=$ROBOT_NO
  - sleep 7; roslaunch iliad_launch_system kmo_navserver.launch            robot_id:=$ROBOT_NO sim:=$SIM robot_type:=$ROBOT_TYPE loc_method:=$LOC_METHOD
  # TODO: these are stubs: HOW are we using toponav? 
  #- roslaunch iliad_launch_system topological_navigation_robot.launch  # move_base_reconf_service:=??? Needed to get yaw tol at targets ...
  #- rosrun topological_navigation visualise_map.py "$TMAP"
- name: localization
  panes:
  - sleep 7; roslaunch iliad_launch_system localization.launch                  robot_id:=$ROBOT_NO sim:=$SIM method:=$LOC_METHOD

- name: human_perception
  panes:
  - if [[ $HUMAN_PERCEPTION == 'true' ]]; then sleep 7; roslaunch iliad_human_perception_launch person_detectors.launch robot_name:=$ROBOT_NAME velodyne:=false ; fi 
  - if [[ $HUMAN_PERCEPTION == 'true' ]]; then sleep 7; roslaunch iliad_human_perception_launch person_tracking_pipeline.launch robot_name:=$ROBOT_NAME ; fi 
  
